// window.addEventListener('load', () => {
//     let map = (fn, array) => {
//     };
// });
"use strict";
// window.addEventListener('load', () => {
//     let min = (a, b) => {
//         return a < b ? a : b;
//     };
//
//     console.log(min(-10, 7));
//
//     let isEven = (a) => {
//         return !(a % 2);
//     };
//
//     console.log(isEven(10));
//
//     let countBs = (str, character) => {
//         let counter = 0;
//         let strLength = str.length;
//         console.log('Количество символов в строке: ' + strLength);
//
//         for (let i = 0; i < strLength; i++) {
//             if (str.charAt(i) === character) {
//                 counter++;
//             }
//         }
//
//         return counter;
//     };
//
//     console.log(countBs('Privet, kak dela', 'e'));
// });
"use strict";
'use strict';

window.addEventListener('load', function () {
    var arr1 = [9, 3, -5, 2, -11, -6, 6, 2, 4, 4, -8];
    var arr2 = arr1.slice();
    var arr3 = [];
    var minNegativeValue = 0;
    var minNegativeIndex = 0;
    var counter = [];
    var currentElem = void 0;
    var arr4 = arr1.slice();
    var arr5 = arr1.slice();
    var arr6 = [];
    var arr7 = arr1.slice();
    var arr8 = arr1.slice();
    var step = 3;
    var minValue = 0;
    var maxValue = 0;
    var minValueIndex = void 0;
    var maxValueIndex = void 0;

    // Task 1 - Максимальный отрицательный элемент массива и его индекс

    // arr1.forEach((elem, index) => {
    //     if (minNegativeValue > elem) {
    //         minNegativeValue = elem;
    //         minNegativeIndex = index;
    //     }
    // });
    //
    // console.log(minNegativeValue, minNegativeIndex);

    // Task 2

    // console.log('Начальный массив: ' + arr2);
    //
    // arr3 = arr2.reduce((current, elem) => {
    //     let count = 0;
    //
    //     if (current === elem) {
    //         count++;
    //     }
    //
    //     counter.push(count);
    //     console.log(current, elem);
    //
    //     return elem;
    // });

    // console.log(arr3);
    // console.log(counter);

    // Task 3 - Поменять местами минимальный и максимальный элементы

    // console.log('Начальный массив: ' + arr8);
    //
    // arr8.map((elem, index) => {
    //     if (elem < minValue) {
    //         minValue = elem;
    //         minValueIndex = index;
    //     } else if (elem > maxValue){
    //         maxValue = elem;
    //         maxValueIndex = index;
    //     }
    //
    //     if (index === arr7.length - 1) {
    //         arr8[minValueIndex] = maxValue;
    //         arr8[maxValueIndex] = minValue;
    //     }
    //
    //     return elem;
    // });
    //
    // console.log('Массив после: ' + arr8);

    // Task 4 - Сдвиг массива

    // console.log(arr7);
    //
    // arr7.splice(2, 2 + step, 0);
    //
    // console.log(arr7);

    // Task 5 - Вывести неповторяющиеся элементы массива

    // arr6 = arr5.filter((elem, index, arr) => {
    //     console.log(arr.indexOf(elem), elem, index);
    //     return arr.indexOf(elem) === index;
    // });
    //
    // console.log('Неповторяющиеся элементы массива: ' + arr6);

    // Task 6 - Реверс массива

    // console.log(arr4.reverse());
});
// window.addEventListener('load', () => {
//     console.log('Задача номер раз');
//     let strTaskOne = '#';
//     for(let i = 1; i <= 7; i++ ) {
//         console.log(strTaskOne + '\n');
//         strTaskOne += '#';
//     }
//
//     console.log('\n' + 'Задача номер два');
//     for(let i = 1; i <= 100; i++ ) {
//         if(i % 3 == 0 || i % 5 == 0) {
//             console.log('FizzBuzz');
//         } else {
//             console.log(i);
//         }
//     }
//
//     console.log('\n' + 'Задача номер три');
//     let strTaskTwo = '';
//     for(let i = 1; i <= 7; i++ ) {
//         if (i % 2 === 0) {
//             strTaskTwo += ' ';
//         }
//         for(let j = 1; j <= 7; j++ ) {
//             if (j % 2 === 0) {
//                 strTaskTwo += '#';
//             } else {
//                 strTaskTwo += ' ';
//             }
//         }
//         console.log(strTaskTwo, '\n');
//         strTaskTwo = '';
//     }
// });
"use strict";
// window.addEventListener('load', () => {
//     // let sequence = (start = 0, step = 1) => {
//     //     start -= step;
//     //     return () => start += step;
//     // };
//     //
//     // let generator = sequence(10, 3);
//     //
//     // console.log(generator());
//     // console.log(generator());
//     // console.log(generator());
//     //
//     // let take = (fn, count) => {
//     //     let array = [];
//     //
//     //     while(count) {
//     //         array.push(fn());
//     //         count--;
//     //     }
//     //
//     //     return array;
//     // };
//     //
//     // let gen2 = sequence(0, 2);
//     //
//     // console.log(take(gen2, 5));
//
//     // let f = (...args) => args.length ? 1 : 0;
//     //
//     // console.log(f(undefined));
//     // console.log(f());
//     //
//
//     // let sum = (...args) => args.reduce((prev, current) => prev + current, 0);
//     //
//     // console.log(sum());
//     // console.log(sum(1));
//     // console.log(sum(1, 2));
//     // console.log(sum(1, 2, 3));
//     // console.log(sum(1, 2, 3, 4));
//
//     let myConcat = (...args) => {
//         let array = [];
//
//         for (let i = 0; i <= args.length; i++) {
//             if (i > 0) {
//                 array.push(args[i]);
//             }
//         }
//
//         return array.join(args[0]);
//     };
//
//     console.log(myConcat(', ', 'red', 'orange', 'blue'));
//     console.log(myConcat('; ', 'red', 'orange', 'blue'));
//     console.log(myConcat('. ', 'red', 'orange', 'blue'));
// });
"use strict";
// window.addEventListener('load', () => {
//     // let sum = (array) => {
//     //     let sumOfElements = array.reduce((sum, elem) => {
//     //         return sum + elem;
//     //     }, 0);
//     //
//     //     return sumOfElements;
//     // };
//     //
//     // let range = (startValue, endValue, step) => {
//     //     step = step || 1;
//     //     let array = [];
//     //
//     //     if (startValue < endValue) {
//     //         for (let i = startValue; i <= endValue; i = i + step) {
//     //             array.push(i);
//     //         }
//     //     } else {
//     //         for (let i = startValue; i >= endValue; i = i + step) {
//     //             array.push(i);
//     //         }
//     //     }
//     //
//     //     console.log(array);
//     //     return array;
//     // };
//     //
//     // console.log(range(1, 10));
//     // console.log(sum(range(1, 10, 3)));
//     // console.log(sum(range(10, 1, -2)));
//
//     let arrayToList = (arr) => {
//         let list = {};
//
//         for (let i = arr.length - 1; i >= 0; i--) {
//             list = {value: arr[i], rest: list};
//         }
//
//         return list;
//     };
//
//     let arrayToListReduce = (arr) => {
//         let list = {};
//
//         arr.reduceRight((current, elem) => {
//             list = {value: elem, rest: list};
//         }, 0);
//
//         return list;
//     };
//
//     let listToArray = (list) => {
//         let arr = [];
//
//         while(list) {
//             arr.push(list.value);
//             list = list.rest;
//         }
//
//         return arr;
//     };
//
//     let prepend = (elem, list) => {
//         return list = {value: elem, rest: list};
//     };
//
//     let nth = (list, num) => {
//         let counter = 0;
//         let element;
//
//         while (list) {
//             if (num === counter) {
//                 element = list.value;
//             }
//             counter++;
//             list = list.rest;
//         }
//
//         return element;
//     };
//
//     console.log(arrayToListReduce([1, 2, 3]));
//     console.log(arrayToList([1, 2, 3]));
//     console.log(listToArray(arrayToList([10, 20, 30])));
//     console.log(prepend(10, prepend(20, null)));
//     console.log(nth(arrayToList([10, 20, 30]), 1));
// });
//
"use strict";
"use strict";

// window.addEventListener('load', () => {
var arr1 = [-9, 3, -5, 2, 7, 11, -6, 6, 4, -8];
var arr2 = [];
var arr3 = [121, 25, 57];
var arr5 = void 0;
var arr6 = arr1.slice();
var arr7 = arr1.slice();
var summ = 0;
var summ2 = 0;
var summ3 = 0;
var negative = 0;
var avg = 0;
var minValue = 0;
var maxValue = 0;
var minValueIndex = void 0;
var maxValueIndex = void 0;
var summ4 = 0;
var arr8 = void 0;

// Task 1

// console.log('Начальный массив: ' + arr1);

// arr2 = arr1.filter((elem) => {
//     if (negative) {
//         return summ += Math.abs(elem);
//     }
//
//     if (elem < 0 && !negative) {
//         negative = 1;
//     }
// });

// console.log('Массив после: ' + arr2);
// console.log('Сумма: ' + summ);

//Task 2

// console.log('Номер минимального по модули элемента: ' + Math.min.apply(null, arr1.map(Math.abs)));

//Task 3

// console.log('Третий массив: ' + arr3);

// arr3.toString().split('').map((elem) => {
//     if (elem != ',') {
//         return summ2 += +elem;
//     }
// });

// console.log('Сумма цифр массива: ' + summ2);

// Task 4

// arr8 = arr7.map((elem, index) => {
//     if (elem < minValue) {
//         minValue = elem;
//         minValueIndex = index;
//     } else if (elem > maxValue){
//         maxValue = elem;
//         maxValueIndex = index;
//     }
//
//     if (index === arr7.length - 1) {
//         arr7.forEach((elem, index) => {
//             if (minValueIndex < maxValueIndex) {
//                 if (index > minValueIndex && index < maxValueIndex) {
//                     summ4 += elem;
//                 }
//             } else {
//                 if (index < minValueIndex && index > maxValueIndex) {
//                     summ4 += elem;
//                 }
//             }
//         });
//     }
//
//     return summ4;
// });
//
// console.log('Сумма элементов между минимальным и максимальным элементами: ' + summ4);

// Task 5

// console.log('Массив для вычисления среднего арифметического: ' + arr6);

// arr5 = arr6.filter((elem) => {
//     if (elem > 0) {
//         return summ3 += elem;
//     }
// });
//
// avg = summ3 / arr5.length;
//
// console.log('Среднее арифметическое положительных элементов массива: ' + avg);

// });
// window.addEventListener('load', () => {
//     let arr1 = [1, 3, -5, 2, 7, 11, -6, 6, 4, -6];
//     let arr2 = [];
//     let arr3 = [];
//     let arr4 = arr1.slice();
//     let summ1 = 0;
//     let total = 0;
//
//     for (let i = 0; i < arr1.length; i++) {
//         total += arr1[i];
//         if (arr1[i] % 2 == 0 && arr1[i] > 0) {
//             summ1 += arr1[i];
//             arr2.push(arr1[i]);
//         }
//     }
//
//     let avg = total / arr1.length;
//
//     console.log('Начальный массив: ' + arr1);
//     console.log('Сумма четных положительных элементов: ' + summ1);
//     console.log('Массив четных элементов: ' + arr2);
//     console.log('Максимальное значение: ' + Math.max.apply(null, arr2));
//     console.log('Среднее арифмиическое:' + avg);
//
//     for (let i = 0; i < arr1.length; i++) {
//         if (arr1[i] < avg) {
//             arr3.push(arr1[i]);
//         }
//     }
//
//     console.log('Элементы меньше среднего арифмитического значния: ' + arr3);
//
//     console.log(arr1.sort((a, b) => {return a - b} ));
//
//     console.log('Два минимальных элемента: ' + arr1.slice(0, 2));
//
//     for (let i = 0; i < arr4.length; i++) {
//         if (arr4[i] > 2 && arr4[i] < 7) {
//             arr4.splice(i--, 1);
//             arr4.splice(arr4.length, 0, 0);
//         }
//     }
//
//     console.log('Удалены элементы в дипозоне от 2 до 7: ' + arr4);
// });
"use strict";
'use strict';

window.addEventListener('load', function () {
    var mainWrapper = document.querySelector('.todo');
    var todoList = document.querySelector('.todo__list');
    var counter = 0;
    var todo = void 0;

    var toLocal = function toLocal() {
        todo = todoList.innerHTML;
        localStorage.setItem('todo', todo);
    };

    var createElement = function createElement() {
        var input = document.querySelector('.todo__input');
        var inputValue = input.value;
        var newLi = document.createElement('li');
        var liStructure = '<span class="todo__item-text" contenteditable="false"></span>' + '<div class="todo__item-buttons">' + '<button class="todo__item-button -edit">Edit</button>' + '<button class="todo__item-button -remove">Remove</button>' + '<button class="todo__item-button -done">Done</button>' + '</div>';
        if (inputValue.trim().length !== 0) {
            newLi.innerHTML = liStructure;
            newLi.classList.add('todo__item');
            newLi.querySelector('.todo__item-text').innerHTML = inputValue;
            todoList.appendChild(newLi);
            input.value = '';
            counter++;
        }
    };

    var removeElement = function removeElement(elem) {
        todoList.removeChild(elem.parentNode.parentNode);
    };

    var editElement = function editElement(elem) {
        var elemParent = elem.parentNode.parentNode;
        var editingField = elemParent.querySelector('.todo__item-text');

        if (editingField.classList.contains('js-todo-active')) {
            editingField.classList.remove('js-todo-active');
            editingField.setAttribute('contenteditable', 'false');
            elem.innerHTML = 'Edit';
        } else {
            editingField.classList.add('js-todo-active');
            editingField.setAttribute('contenteditable', 'true');
            elem.innerHTML = 'Save';
        }
    };

    var completeElement = function completeElement(elem) {
        var elemParent = elem.parentNode.parentNode;
        var text = elemParent.querySelector('.todo__item-text');

        return text.classList.contains('js-todo-checked') ? text.classList.remove('js-todo-checked') : text.classList.add('js-todo-checked');
    };

    mainWrapper.addEventListener('click', function (event) {
        var target = event.target;

        if (target.tagName.toLowerCase() === 'button') {
            if (target.classList.contains('todo__add')) {
                createElement();
            }

            if (target.classList.contains('-remove')) {
                removeElement(target);
            }

            if (target.classList.contains('-edit')) {
                editElement(target);
            }

            if (target.classList.contains('-done')) {
                completeElement(target);
            }

            toLocal();
        }
    });

    if (localStorage.getItem('todo')) {
        todoList.innerHTML = localStorage.getItem('todo');
    }
});